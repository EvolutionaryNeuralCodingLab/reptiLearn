[{"/home/tal/dev/reptilearn/ui/src/index.js":"1","/home/tal/dev/reptilearn/ui/src/App.js":"2","/home/tal/dev/reptilearn/ui/src/reportWebVitals.js":"3","/home/tal/dev/reptilearn/ui/src/components.js":"4","/home/tal/dev/reptilearn/ui/src/experiment_view.js":"5","/home/tal/dev/reptilearn/ui/src/socket.js":"6","/home/tal/dev/reptilearn/ui/src/config.js":"7","/home/tal/dev/reptilearn/ui/src/stream_view.js":"8","/home/tal/dev/reptilearn/ui/src/video_record_view.js":"9","/home/tal/dev/reptilearn/ui/src/log_view.js":"10","/home/tal/dev/reptilearn/ui/src/main_panel_view.js":"11","/home/tal/dev/reptilearn/ui/src/arena_control_view.js":"12","/home/tal/dev/reptilearn/ui/src/blocks_view.js":"13"},{"size":637,"mtime":1616512606533,"results":"14","hashOfConfig":"15"},{"size":1398,"mtime":1616607897948,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1611845073939,"results":"17","hashOfConfig":"18"},{"size":714,"mtime":1616152196206,"results":"19","hashOfConfig":"15"},{"size":9578,"mtime":1616658547345,"results":"20","hashOfConfig":"15"},{"size":296,"mtime":1615550870330,"results":"21","hashOfConfig":"15"},{"size":92,"mtime":1615550971815,"results":"22","hashOfConfig":"15"},{"size":7327,"mtime":1616659050095,"results":"23","hashOfConfig":"15"},{"size":2832,"mtime":1616604217049,"results":"24","hashOfConfig":"15"},{"size":1617,"mtime":1619020732188,"results":"25","hashOfConfig":"15"},{"size":2048,"mtime":1616658705791,"results":"26","hashOfConfig":"15"},{"size":3085,"mtime":1617635951088,"results":"27","hashOfConfig":"15"},{"size":4638,"mtime":1616662231582,"results":"28","hashOfConfig":"15"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"mgtd88",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"15r9jqw",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"31"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"/home/tal/dev/reptilearn/ui/src/index.js",[],["58","59"],"/home/tal/dev/reptilearn/ui/src/App.js",[],"/home/tal/dev/reptilearn/ui/src/reportWebVitals.js",[],["60","61"],"/home/tal/dev/reptilearn/ui/src/components.js",[],"/home/tal/dev/reptilearn/ui/src/experiment_view.js",["62"],"import React from 'react';\nimport {Selector} from './components.js';\nimport ReactJson from 'react-json-view';\nimport {api_url} from './config.js';\nimport {ReflexContainer, ReflexSplitter, ReflexElement} from 'react-reflex';\nimport { BlocksView } from './blocks_view.js';\n\n/*\n  assign object o to object n without overwriting existing properties of o.\n */\nconst assign_keep_old = (o, n) => {\n    if (o === null || o === undefined)\n        return n;\n    if (n === null || n === undefined)\n        return o;                        \n    Object.keys(n).forEach(param => {\n\tif (o[param] !== undefined)\n\t    n[param] = o[param];\n    });\n    return n;\n};\n\nexport const ExperimentView = ({ctrl_state}) => {\n    const [experimentList, setExperimentList] = React.useState([]);\n    const [experimentParams, setExperimentParams] = React.useState({});\n    const [experimentBlocks, setExperimentBlocks] = React.useState([]);\n    const [defaultParams, setDefaultParams] = React.useState(null);\n    const [defaultBlocks, setDefaultBlocks] = React.useState(null);\n    const experimentIdInput = React.useRef();\n    \n    const exp_url = api_url + \"/experiment\";\n\n    const update_defaults = (override_blocks) => {\n\tfetch(exp_url + \"/default_params\")\n\t    .then(res => res.json())\n\t    .then(new_defaults => {\n                if (new_defaults == null) {\n                    setDefaultParams(null);\n                    setDefaultBlocks(null);\n                }\n                else {                \n                    const new_default_params = new_defaults.params === undefined ?\n                          null : new_defaults.params;\n                    const new_default_blocks = new_defaults.blocks === undefined ?\n                          null : new_defaults.blocks;\n                    \n                    merge_params(new_default_params);\n                    if (override_blocks ||\n                        new_default_blocks.length === experimentBlocks.length ||\n                        experimentBlocks.length === 0)\n                        \n                        merge_all_blocks(new_default_blocks);\n\n                    setDefaultParams(new_default_params);\n                    setDefaultBlocks(new_default_blocks);\n                }\n            });\n    };\n\n    const merge_params = (new_defaults) => {\n        setExperimentParams(assign_keep_old(experimentParams, new_defaults));\n    };\n\n    const merge_all_blocks = (new_defaults) => {\n        const blocks = [];\n        new_defaults.forEach((new_block, i) => {\n            blocks.push(merge_block(new_block, i));\n        });\n        setExperimentBlocks(blocks);\n    };\n\n    const merge_block = (new_defaults, block_idx) => {\n        const new_default_block = {...new_defaults};\n        const experiment_block = (experimentBlocks.length > block_idx) ?\n              {...experimentBlocks[block_idx]} : null;\n\n        return assign_keep_old(experiment_block, new_default_block);        \n    };\n    \n    const reset_params = () => {\n        setExperimentParams(defaultParams);\n    };\n\n    const reset_all_blocks = () => {\n        setExperimentBlocks(defaultBlocks);\n    };\n    \n    const set_experiment = (exp_name, override_blocks) => {\n        if (is_running) {\n            update_defaults(false);\n            return;\n        }\n\n        const new_exp = override_blocks|| exp_name !== ctrl_state.experiment.cur_experiment;\n\tif (new_exp) {\n\t    setExperimentParams({});\n            setExperimentBlocks([{}]);\n\t}\n\n\tfetch(exp_url + `/set/${exp_name}`)\n\t    .then((res) => {\n                update_defaults(new_exp);\n            });\n    };\n\n    const refresh_experiment_list = () => {\n        fetch(exp_url + \"/refresh_list\")\n            .then(res => res.json())\n            .then(res => setExperimentList(res));\n    };\n\n    const select_experiment = (opt, idx) => {\n        if (idx >= experimentList.length) {\n            if (opt === \"None\")\n                set_experiment(\"None\");\n            else\n                refresh_experiment_list();\n        }\n        else {\n            set_experiment(opt);\n        }\n    };\n    \n    const run_experiment = () => {\n        const id = experimentIdInput.current.value.trim() === \"\" ?\n              cur_exp_name : experimentIdInput.current.value;\n        \n\tfetch(exp_url + \"/run\", {\n\t    method: \"POST\",\n\t    headers: {\n\t\t\"Accept\": \"application/json\",\n\t\t\"Content-Type\": \"application/json\"\n\t    },\n\t    body: JSON.stringify({\n                \"id\": id,\n                \"params\": experimentParams,\n\t\t\"blocks\": experimentBlocks})\n\t});\n\t\n    };\n\n    const end_experiment = () => {\n\tfetch(exp_url + \"/end\");\n    };\n\n    const on_params_changed = (e) => {\n\tsetExperimentParams(e.updated_src);\n    };\n\n    const next_block = () => {\n        fetch(exp_url + \"/next_block\");\n    };\n\n    const next_trial = () => {\n        fetch(exp_url + \"/next_trial\");\n    };\n\n    React.useEffect(() => {\n\tfetch(exp_url + \"/list\")\n\t    .then(res => res.json())\n            .then(\n                (res) => {\n                    setExperimentList(res);\n                    if (ctrl_state != null && ctrl_state.experiment.cur_experiment != null) {\n                        set_experiment(ctrl_state.experiment.cur_experiment, true);\n                    }                    \n                }\n            );               \n    }, []);\n    \n    if (!ctrl_state)\n\treturn null;\n\n    const cur_exp_name = ctrl_state.experiment.cur_experiment;\n    const is_running = ctrl_state.experiment.is_running;\n\n    const experiment_selector = (() => {\n        const sep = \"\\u2500\\u2500\\u2500\\u2500\\u2500\";\n        const cur_exp_idx = cur_exp_name ? experimentList.indexOf(cur_exp_name) : null;\n        const select_idx = cur_exp_idx!==null ? cur_exp_idx : experimentList.length + 1;\n        \n        return <Selector\n                 options={experimentList.concat([sep, \"None\", \"Refresh list\"])}\n\t\t selected={select_idx}\n\t\t on_select={select_experiment}\n                 disabled_options={[sep]}\n\t         disabled={ctrl_state.experiment.is_running}\n               />;\n    })();\n\n    const exp_controls = (() => {\n        if (cur_exp_name == null)\n            return null;\n\n        const run_end_btn = is_running ?\n          <button onClick={end_experiment}>End</button>\n\t  : <button onClick={run_experiment}>Run</button>;\n        \n        return (\n            <React.Fragment>\n              <button onClick={(e) => set_experiment(cur_exp_name)}\n\t\t      disabled={is_running}>\n\t        Reload\n\t      </button>\n              id:\n              <input type=\"text\"\n                     ref={experimentIdInput}\n                     placeholder={cur_exp_name}\n                     disabled={is_running}\n                     size=\"16\"/>\n              {run_end_btn}\n            </React.Fragment>\n        );\n    })();\n          \n    const run_state_toolbar = !is_running ? null :\n          <div className=\"subsection_header\">\n            <label>block:</label>\n            <input type=\"text\" readOnly value={ctrl_state.experiment.cur_block+1} size=\"3\"/>\n            <button onClick={next_block}>+</button>\n            <label> trial:</label>\n            <input type=\"text\" readOnly value={ctrl_state.experiment.cur_trial+1} size=\"3\"/>\n            <button onClick={next_trial}>+</button>\n          </div>;\n\n    const params_div = experimentParams !== null ?\n          (\n              <React.Fragment>\n                <div className=\"subsection_header\">\n                  <span className=\"title\">Parameters</span>\n                  <button onClick={reset_params} disabled={is_running}>Reset</button>\n                </div>\n                <div className=\"subsection\">\n\t          <ReactJson src={experimentParams}\n\t\t             name={null}\n\t\t             onEdit={on_params_changed}\n\t\t             onAdd={on_params_changed}\n                             onDelete={on_params_changed}\n\t          />\n                </div>\n              </React.Fragment>\n\n          ) : null;\n\n    const params_height = is_running ? \"calc(100% - 48px)\" : \"calc(100% - 20px)\";\n    \n    return (\n        <ReflexContainer orientation=\"horizontal\">\n          <ReflexElement minSize={26} style={{overflow: \"hidden\"}}>\n            <div className=\"section_header\">\n              <span className=\"title\">Experiment</span>\n              {experiment_selector}\n              {exp_controls}\n            </div>\n            {run_state_toolbar}\n            <div style={{overflow: \"scroll\", height: params_height}}>\n              {params_div}\n              <div className=\"subsection_header\">\n                <span className=\"title\">Blocks</span>\n                <button onClick={reset_all_blocks} disabled={is_running}>Reset all</button>\n              </div>\n              <BlocksView is_running={is_running}\n                          params={experimentParams}\n                          blocks={experimentBlocks}\n                          default_blocks={defaultBlocks}\n                          set_blocks={setExperimentBlocks}\n                          cur_block={ctrl_state.experiment.cur_block}/>\n            </div>            \n          </ReflexElement>\n          <ReflexSplitter/>\n          <ReflexElement minSize={26} style={{overflow: \"hidden\"}}>\n            <div className=\"section_header\">\n              <span className=\"title\">State</span>\n            </div>\n            <div style={{overflow: \"scroll\", height: \"calc(100% - 18px)\"}}>\n              <ReactJson src={ctrl_state}\n                         name={null}\n                         style={{height: \"auto\"}}\n              />\n            </div>\n          </ReflexElement>        \n        </ReflexContainer>       \n    );\n};\n","/home/tal/dev/reptilearn/ui/src/socket.js",[],"/home/tal/dev/reptilearn/ui/src/config.js",[],"/home/tal/dev/reptilearn/ui/src/stream_view.js",[],"/home/tal/dev/reptilearn/ui/src/video_record_view.js",[],"/home/tal/dev/reptilearn/ui/src/log_view.js",["63"],"/home/tal/dev/reptilearn/ui/src/main_panel_view.js",[],"/home/tal/dev/reptilearn/ui/src/arena_control_view.js",[],"/home/tal/dev/reptilearn/ui/src/blocks_view.js",[],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"64","replacedBy":"68"},{"ruleId":"66","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":169,"column":8,"nodeType":"72","endLine":169,"endColumn":10,"suggestions":"73"},{"ruleId":"74","severity":1,"message":"75","line":7,"column":12,"nodeType":"76","messageId":"77","endLine":7,"endColumn":18},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],["78"],["79"],"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'ctrl_state', 'exp_url', and 'set_experiment'. Either include them or remove the dependency array.","ArrayExpression",["80"],"no-unused-vars","'logMsg' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},"Update the dependencies array to be: [ctrl_state, exp_url, set_experiment]",{"range":"83","text":"84"},[5281,5283],"[ctrl_state, exp_url, set_experiment]"]