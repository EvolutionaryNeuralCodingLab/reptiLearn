[{"/home/tal/dev/reptilearn/ui/src/index.js":"1","/home/tal/dev/reptilearn/ui/src/App.js":"2","/home/tal/dev/reptilearn/ui/src/reportWebVitals.js":"3","/home/tal/dev/reptilearn/ui/src/components.js":"4","/home/tal/dev/reptilearn/ui/src/experiment_view.js":"5","/home/tal/dev/reptilearn/ui/src/state_view.js":"6","/home/tal/dev/reptilearn/ui/src/socket.js":"7","/home/tal/dev/reptilearn/ui/src/config.js":"8","/home/tal/dev/reptilearn/ui/src/stream_view.js":"9","/home/tal/dev/reptilearn/ui/src/video_record_view.js":"10","/home/tal/dev/reptilearn/ui/src/log_view.js":"11"},{"size":635,"mtime":1615277448780,"results":"12","hashOfConfig":"13"},{"size":3669,"mtime":1615835125387,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1611845073939,"results":"15","hashOfConfig":"16"},{"size":661,"mtime":1615551571990,"results":"17","hashOfConfig":"13"},{"size":2751,"mtime":1615747728603,"results":"18","hashOfConfig":"13"},{"size":282,"mtime":1615746951616,"results":"19","hashOfConfig":"13"},{"size":296,"mtime":1615550870330,"results":"20","hashOfConfig":"13"},{"size":92,"mtime":1615550971815,"results":"21","hashOfConfig":"13"},{"size":6169,"mtime":1615835241440,"results":"22","hashOfConfig":"13"},{"size":2386,"mtime":1615823990031,"results":"23","hashOfConfig":"13"},{"size":781,"mtime":1615750559770,"results":"24","hashOfConfig":"13"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"mgtd88",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"15r9jqw",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"27"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"27"},"/home/tal/dev/reptilearn/ui/src/index.js",[],["51","52"],"/home/tal/dev/reptilearn/ui/src/App.js",[],"/home/tal/dev/reptilearn/ui/src/reportWebVitals.js",[],["53","54"],"/home/tal/dev/reptilearn/ui/src/components.js",[],"/home/tal/dev/reptilearn/ui/src/experiment_view.js",["55"],"import React from 'react';\nimport {Selector} from './components.js';\nimport ReactJson from 'react-json-view';\nimport {api_url} from './config.js';\n\nexport const ExperimentView = ({ctrl_state}) => {\n    const [experimentList, setExperimentList] = React.useState([]);\n    const [experimentParams, setExperimentParams] = React.useState({});\n    const [error, setError] = React.useState(null);\n    \n    React.useEffect(() => {\n\tfetch(api_url + \"/list_experiments\")\n\t    .then(res => res.json())\n            .then(\n                (res) => {\n                    setExperimentList(res);\n                },\n                (error) => {\n                    setError(error.toString());\n                }\n            );               \n    }, []);\n\n    const set_experiment = val => {\n\tfetch(api_url + `/set_experiment/${val}`);\n    };\n\n    const refresh_experiment_list = (e) => {\n        fetch(api_url + \"/refresh_experiment_list\")\n            .then(res => res.json())\n            .then(\n                res => setExperimentList(res),\n                error => setError(error.toString()));              \n    };\n    \n    const run_experiment = () => {\n\tfetch(api_url + \"/run_experiment\", {\n\t    method: \"POST\",\n\t    headers: {\n\t\t\"Accept\": \"application/json\",\n\t\t\"Content-Type\": \"application/json\"\n\t    },\n\t    body: JSON.stringify(experimentParams)\n\t}).then(res => {\n\t    if (!res.ok)\n\t\tres.text().then(json => console.log(json));\n\t});\n\t\n    };\n\n    const end_experiment = () => {\n\tfetch(api_url + \"/end_experiment\")\n\t    .then(res => console.log(res));\n    };\n\n    const on_params_changed = (e) => {\n\tsetExperimentParams(e.updated_src);\n    };\n\n    if (!ctrl_state)\n\treturn null;\n\n    const cur_exp_name = ctrl_state.experiment.cur_experiment;\n    const cur_exp_idx = experimentList.indexOf(cur_exp_name) + 1;\n    const is_running = ctrl_state.experiment.is_running;\n    \n    const reload_btn = cur_exp_name ? (\n\t<button onClick={(e) => set_experiment(cur_exp_name)}\n\t\tdisabled={is_running}>\n\t  Reload\n\t</button>)\n                : null;\n    \n    const run_end_btn = is_running ?\n          <button onClick={end_experiment}>End Experiment</button>\n\t          : <button onClick={run_experiment}>Run Experiment</button>;\n    \n    return (\n\t<div className=\"pane-content\">\n          Experiment:\n\t  <Selector options={[\"None\"].concat(experimentList)}\n\t\t    selected={cur_exp_idx}\n\t\t    on_select={set_experiment}\n\t            disabled={ctrl_state.experiment.is_running}/>\n\t  {reload_btn}\n          <button onClick={refresh_experiment_list}>Refresh list...</button>\n\t  <br/>\n\t  <label>Parameters:</label>\n\t  <ReactJson src={experimentParams}\n\t\t     name={null}\n\t\t     onEdit={on_params_changed}\n\t\t     onAdd={on_params_changed}\n\t  />\n\t  {run_end_btn}\n\t</div>\n    );\n};\n","/home/tal/dev/reptilearn/ui/src/state_view.js",[],"/home/tal/dev/reptilearn/ui/src/socket.js",[],"/home/tal/dev/reptilearn/ui/src/config.js",[],"/home/tal/dev/reptilearn/ui/src/stream_view.js",[],"/home/tal/dev/reptilearn/ui/src/video_record_view.js",[],"/home/tal/dev/reptilearn/ui/src/log_view.js",["56"],"import React from 'react';\nimport {SocketContext} from './socket.js';\n\nexport const LogView = () => {\n    const logContainer = React.useRef(\"System log\\n==========\\n\");\n    const textarea_ref = React.useRef();\n    const [logMsg, setLogMsg] = React.useState(null);\n    \n    const socket = React.useContext(SocketContext);\n\n    React.useEffect(() => {\n\tsocket.on(\"log\", msg => {\t   \n            logContainer.current += \"\\n\" + msg ;\n            setLogMsg(msg);\n\t    if (textarea_ref.current !== null)\n\t\ttextarea_ref.current.scrollTop = textarea_ref.current.scrollHeight;\n        });\n    }, [socket]);\n\n    return (\n          <textarea value={logContainer.current}\n                    readOnly\n                    className=\"log_view pane-content\"\n\t\t    ref={textarea_ref}/>\n    );\n};\n",{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"57","replacedBy":"61"},{"ruleId":"59","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":9,"column":12,"nodeType":"65","messageId":"66","endLine":9,"endColumn":17},{"ruleId":"63","severity":1,"message":"67","line":7,"column":12,"nodeType":"65","messageId":"66","endLine":7,"endColumn":18},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],["68"],["69"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'logMsg' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]